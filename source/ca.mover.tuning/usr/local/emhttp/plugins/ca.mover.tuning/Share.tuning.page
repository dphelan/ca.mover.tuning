Menu="Share:2a"
Title="Mover Tuning - Share Settings"
Tag="gear"
---
<?PHP
/* Copyright 2005-2023, Lime Technology
 * Copyright 2012-2023, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
ob_start();
require_once("/usr/local/emhttp/plugins/ca.mover.tuning/perShareMover.php");
ob_end_clean();

$plugin='ca.mover.tuning';
$shareName = $_GET['name'];
$shareCFG = "/boot/config/plugins/$plugin/shareOverrideConfig/$shareName.cfg";
$cfg = parse_share_cfg($plugin, $shareName);
$overrideDisabled = ($cfg['moverOverride'] != "yes") ? "no" : "yes";
$ageDisabled = ($cfg['age'] != "yes") ? "disabled" : "";
$sizefDisabled = ($cfg['sizef'] != "yes") ? "disabled" : "";
$sparsnessfDisabled = ($cfg['sparsnessf'] != "yes") ? "disabled" : "";
$filetypesfDisabled = ($cfg['filetypesf'] != "yes") ? "disabled" : "";
$filelistfDisabled = ($cfg['filelistf'] != "yes") ? "disabled" : "";
?>

<script>
function moveShareNow() {
        $.post("/plugins/ca.mover.tuning/moveShareNow.php?Share='<?echo $shareName?>'");
	MoveShare.disabled = true;
}

$.fn.toggleAttr = function(attr) {
  this.each(function() {
		var $this = $(this);
		$this.attr(attr) ? $this.removeAttr(attr) : $this.attr(attr,true);
	});
}

function updateScreenMoverTuning(option,slow) {
  switch (option) {
  case 'no':
    $('#moverSettings').hide(slow);
    break;
  case 'yes':
    $('#moverSettings').show(slow);
    break;
  }
}
$(function() {
  updateScreenMoverTuning('<? echo $overrideDisabled ?>');
});
</script>

<form markdown="1" method="POST" action="/update.php" target="progressFrame" onsubmit="updateCron();">
<input type="hidden" name="#file" value="<?=$shareCFG?>">

<? if ($shareName != ""): ?>
<? if (strpos(file_get_contents("/boot/config/shares/$shareName.cfg"), 'shareUseCache="no"') !== false): ?>
<div markdown="1" class="shade-<?=$display['theme']?>">
_(Mover Tuning settings not available for this share.)_
</div>
<? elseif (strpos(file_get_contents("/boot/config/shares/$shareName.cfg"), 'shareUseCache="yes"') !== false): ?>

<div markdown="1" class="shade-<?=$display['theme']?>">
_(Override Mover Tuning settings for this share)_:
: <select name="moverOverride" onchange="updateScreenMoverTuning(this.value, 'slow')">
  <?= mk_option($cfg['moverOverride'], 'no', 'No') ?>
  <?= mk_option($cfg['moverOverride'], 'yes', 'Yes') ?>
  </select>
  
<!--:mover_tuning_override_help:-->
>Select **Yes** to override the primary Mover Tuning settings for this share.


<div markdown="1" id="moverSettings">
_(Move files off cache based on age)_:
: <select name="age" onchange='$(".myage").toggleAttr("disabled")'>
  <?= mk_option($cfg['age'], 'no', 'No') ?>
  <?= mk_option($cfg['age'], 'yes', 'Yes') ?>
  </select>

<!--:mover_tuning_age_help:-->
> Select **Yes** to move files off of the cache based on their age (in **days**).

_(Only move files that are older than this (in days))_:
: <select name="daysold" class='myage' <?= $ageDisabled ?>>
  <?= mk_option($cfg['daysold'], 1, "1") ?>
  <?= mk_option($cfg['daysold'], 2, "2") ?>
  <?= mk_option($cfg['daysold'], 3, "3") ?>
  <?= mk_option($cfg['daysold'], 4, "4") ?>
  <?= mk_option($cfg['daysold'], 5, "5") ?>
  <?= mk_option($cfg['daysold'], 6, "6") ?>
  <?= mk_option($cfg['daysold'], 7, "7") ?>
  <?= mk_option($cfg['daysold'], 8, "8") ?>
  <?= mk_option($cfg['daysold'], 9, "9") ?>
  <? for ($dt = 10; $dt < 770; $dt += 5): ?>
  <?= mk_option($cfg['daysold'], $dt, "$dt") ?>
  <? endfor; ?>
  </select>

<!--:mover_tuning_min_age_help:-->
> Select the number of days old a file has to be in order to be moved (Up To 1 year).

_(Use CTIME)_:
: <select name="ctime" class='myage' <?= $ageDisabled ?>>
  <?= mk_option($cfg['ctime'], 'no', 'No') ?>
  <?= mk_option($cfg['ctime'], 'yes', 'Yes') ?>
  </select>

<!--:mover_tuning_ctime_help:-->
> Select **Yes** to use CTIME instead of MTIME in the find command.

_(Move files based on size)_:
: <select name="sizef" onchange='$(".mysizef").toggleAttr("disabled")'>
  <?= mk_option($cfg['sizef'], 'no', 'No') ?>
  <?= mk_option($cfg['sizef'], 'yes', 'Yes') ?>
  </select>

<!--:mover_tuning_size_help:-->
> Select **Yes** to move files based on their file size.

_(Only move files larger than this (in MB))_:
: <select name="sizeinM" size="1" class='mysizef' <?= $sizefDisabled ?>>
  <?= mk_option($cfg['sizeinM'], 1, "1") ?>
  <?= mk_option($cfg['sizeinM'], 2, "2") ?>
  <?= mk_option($cfg['sizeinM'], 3, "3") ?>
  <?= mk_option($cfg['sizeinM'], 4, "4") ?>
  <?= mk_option($cfg['sizeinM'], 5, "5") ?>
  <?= mk_option($cfg['sizeinM'], 6, "6") ?>
  <?= mk_option($cfg['sizeinM'], 7, "7") ?>
  <?= mk_option($cfg['sizeinM'], 8, "8") ?>
  <?= mk_option($cfg['sizeinM'], 9, "9") ?>
  <?= mk_option($cfg['sizeinM'], 10, "10") ?>
  <?= mk_option($cfg['sizeinM'], 11, "11") ?>

  <? for ($ds = 12; $ds < 1026; $ds += 2): ?>
  <?= mk_option($cfg['sizeinM'], $ds, "$ds") ?>
  <? endfor; ?>
  </select>

<!--:mover_tuning_min_size_help:-->
> Select the minimum size a file has to be to get moved (in **Megabytes**).

_(Move files based on sparseness)_:
: <select name="sparsnessf" onchange='$(".mysparsnessf").toggleAttr("disabled")'>
  <?= mk_option($cfg['sparsnessf'], 'no', 'No') ?>
  <?= mk_option($cfg['sparsnessf'], 'yes', 'Yes') ?>
  </select>

<!--:mover_tuning_sparseness_help:-->
> Select **Yes** to move files based on their sparseness.

_(Move files that are greater than this sparseness)_:
: <select name='sparsnessv' class='mysparsnessf' <?= $sparsnessfDisabled ?>>
  <?= mk_option($cfg['sparsnessv'], 1, "0.1") ?>
	<?= mk_option($cfg['sparsnessv'], 2, "0.2") ?>
	<?= mk_option($cfg['sparsnessv'], 3, "0.3") ?>
	<?= mk_option($cfg['sparsnessv'], 4, "0.4") ?>
	<?= mk_option($cfg['sparsnessv'], 5, "0.5") ?>
	<?= mk_option($cfg['sparsnessv'], 6, "0.6") ?>
	<?= mk_option($cfg['sparsnessv'], 7, "0.7") ?>
	<?= mk_option($cfg['sparsnessv'], 8, "0.8") ?>
	<?= mk_option($cfg['sparsnessv'], 9, "0.9") ?>
  </select>

<!--:mover_tuning_min_sparseness_help:-->
> Select the minimum sparseness a file has to be to get moved.

_(Skip files listed in text file)_:
: <select name='filelistf' onchange='$(".myfilelistf").toggleAttr("disabled")'>
  <?= mk_option($cfg['filelistf'], "no", 'No') ?>
  <?= mk_option($cfg['filelistf'], "yes", "Yes") ?>
  </select>

<!--:mover_tuning_file_list_help:-->
> Select **Yes** to skip files which have been listed in a specified text file.

_(File list path)_:
: <input type='text' name='filelistv' class='myfilelistf' value='<?= $cfg['filelistv'] ?>' <?= $filelistfDisabled ?>>

<!--:mover_tuning_file_list_path_help:-->
> Specify the full path to a text file that contains the list of files the mover should skip.

_(Skip file types)_:
: <select name='filetypesf' onchange='$(".myfiletypesf").toggleAttr("disabled")'>
  <?= mk_option($cfg['filetypesf'], "no", 'No') ?>
  <?= mk_option($cfg['filetypesf'], "yes", "Yes") ?>
  </select>

<!--:mover_tuning_file_type_help:-->
> Select **Yes** to skip specific file types.

_(Comma separated list of file types)_:
: <input type='text' name='filetypesv' class='myfiletypesf' value='<?= $cfg['filetypesv'] ?>' <?= $filetypesfDisabled ?>>

<!--:mover_tuning_file_type_delimited_help:-->
> Specify the file types to be skipped, separated by a comma (e.g. **".txt,.mp3,.pdf"**).

Ignore All hidden files and directories
: <select name='ignoreHidden'>
  <?= mk_option($cfg['ignoreHidden'], "no", "No") ?>
  <?= mk_option($cfg['ignoreHidden'], "yes", "Yes") ?>
  </select>

<!--:mover_tuning_hidden_files_help:-->
> Select **Yes** to skip all hidden files and directories (starting with **"."**).

_(Move All from Cache-Yes shares when disk is above a certain percentage)_:
: <select name='omovercfg'>
  <?= mk_option($cfg['omovercfg'], "no", "No") ?>
  <?= mk_option($cfg['omovercfg'], "yes", "Yes") ?>
  </select>

<!--:mover_tuning_mvall_threshold_help:-->
> Select **Yes** to allow this share to follow the "Move All from Cache-yes shares pool percentage" setting in the primary Mover Tuning settings. If this option is not set to **Yes** in primary mover tuning settings, this option will be ignored. Note that if this type of move is executed (due to the threshold being exceeded), this entire share will be moved to the array ignoring any of the other settings.

</div>
</div>

&nbsp;
: <input type="submit" name="#apply" value="Apply" id='Apply'><input type="button" id="DONE" value="Done" onclick="done()">

<div markdown="1" class="shade-<?=$display['theme']?>">
_(Move **ALL** files from current pool (wont use mover settings))_:
: <input type="button" id="MoveShare" value="Move Now" onclick="moveShareNow()">
</div>
> Clicking the **"Move Now"** button will invoke the mover for only this share. It will move the entire share to the array ignoring any mover settings.

<? else: ?>
<div markdown="1" class="shade-<?=$display['theme']?>">
_(Mover Tuning settings not available for this share.)_
</div>
<? endif; ?>
<? else: ?>
Not Applicable (Share Does Not Exist Yet)!
<? endif; ?>

</form>
